#define BLYNK_TEMPLATE_ID "****"
#define BLYNK_TEMPLATE_NAME "I2C"

#define BLYNK_FIRMWARE_VERSION        "0.1.0"

#define BLYNK_PRINT Serial
//#define BLYNK_DEBUG

#define APP_DEBUG

// Uncomment your board, or configure a custom board in Settings.h
//#define USE_SPARKFUN_BLYNK_BOARD
//#define USE_ESP32S2_DEV_KIT
//#define USE_WITTY_CLOUD_BOARD
#define USE_WROVER_BOARD

#include "BlynkEdgent.h"
#include "Keypad.h"
#define ROW_NUM    4  // four rows
#define COLUMN_NUM 4 
char keys[ROW_NUM][COLUMN_NUM] = {
  
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

// For Arduino Microcontroller
//byte rowPins[ROWS] = {9, 8, 7, 6}; 
//byte colPins[COLS] = {5, 4, 3, 2}; 

// For ESP8266 Microcontroller
//byte pin_rows[ROW_NUM] = { D0, D4}; //connect to the row pinouts of the keypad
//byte pin_column[COLUMN_NUM] = {D5, D6, D7, D8}; //connect to the column pinouts of the keypad 

// For ESP32 Microcontroller
byte pin_rows[ROW_NUM] = {19, 18, 5, 17}; 
byte pin_column[COLUMN_NUM] = {2, 0, 4, 16};

Keypad keypad = Keypad( makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM );
#include <Wire.h>

#define I2C_Freq 100000

 

// I2C slave addresses can changeable by user via dip switch on board

#define BOARD_1 0x27    // i2c slave address of BOARD #1
#define BOARD_2 0x26    // i2c slave address of BOARD #2
#define BOARD_3 0x25    // i2c slave address of BOARD #3


#define  ON 1
#define OFF 0

int FAST = 500;              // delay value in ms

unsigned char i2c_buffer;

unsigned char i2c_buffer_1;   // i2c relay variable buffer for #1 relay board
unsigned char i2c_buffer_2;   // i2c relay variable buffer for #2 relay board
unsigned char i2c_buffer_3;   // i2c relay variable buffer for #3 relay board
const String password_1 = "1D04"; // change your password here
const String password_2 = "2D35";  // change your password here
const String password_3 = "2C56";   // change your password here
const String password_4 = "1304"; // change your password here
const String password_5 = "1B35";  // change your password here
const String password_6 = "3C56";   // change your password here
const String password_7 = "1884"; // change your password here
const String password_8 = "1535";  // change your password here
const String password_9 = "2A54";   // change your password here
const String password_10 = "9304"; // change your password here
const String password_11 = "1B15";  // change your password here
const String password_12 = "3CA6";   // change your password here
const String password_13 = "3204"; // change your password here
const String password_14 = "1C35";  // change your password here
const String password_15 = "2656";   // change your password here
const String password_16 = "1354"; // change your password here
const String password_17 = "1B99";  // change your password here
const String password_18 = "3C14";   // change your password here
const String password_19 = "1287"; // change your password here
const String password_20 = "1A69";  // change your password here
const String password_21 = "2C89";   // change your password here
const String password_22 = "1344"; // change your password here
const String password_23 = "1B75";  // change your password here
const String password_24 = "3C86";   // change your password here
String input_password;
void setup()
{
  Serial.begin(115200);
  delay(100);
  Wire.begin(); 
  input_password.reserve(32); // maximum password size is 32, change if needed
  BlynkEdgent.begin();
  
}

void loop() {
  char key = keypad.getKey();

  if (key) {
    Serial.println(key);

    if (key == '*') {
      input_password = ""; // reset the input password
    } else if (key == '#') {
      if (input_password == password_1 ) {
        Serial.println("The password is correct, turning ON relay 1");
        channel_mode(BOARD_1,1,ON);
        delay(1000);
        channel_mode(BOARD_1,1,OFF);
               
      } 
      else if (input_password == password_2 )
      {
        Serial.println("The password is correct, turning ON relay 2");
        channel_mode(BOARD_1,2,ON);
        delay(1000);
        channel_mode(BOARD_1,2,OFF);
        
        
      } 
      else if (input_password == password_3 )
      {
        Serial.println("The password is correct, turning ON relay 3");
        channel_mode(BOARD_1,3,ON);
        delay(1000);
        channel_mode(BOARD_1,3,OFF);
      } 
      else if (input_password == password_4 )
      {
        Serial.println("The password is correct, turning ON relay 4");
        channel_mode(BOARD_1,4,ON);
        delay(1000);
        channel_mode(BOARD_1,4,OFF);
      } 
      else if (input_password == password_5 )
      {
        Serial.println("The password is correct, turning ON relay 5");
        channel_mode(BOARD_1,5,ON);
        delay(1000);
        channel_mode(BOARD_1,5,OFF);
      } 
      else if (input_password == password_6 )
      {
        Serial.println("The password is correct, turning ON relay 6");
        channel_mode(BOARD_1,6,ON);
        delay(1000);
        channel_mode(BOARD_1,6,OFF);
      }
      else if (input_password == password_7 ) {
        Serial.println("The password is correct, turning ON relay 7");
        channel_mode(BOARD_1,7,ON);
        delay(1000);
        channel_mode(BOARD_1,7,OFF);
               
      } 
      else if (input_password == password_8 )
      {
        Serial.println("The password is correct, turning ON relay 8");
        channel_mode(BOARD_1,8,ON);
        delay(1000);
        channel_mode(BOARD_1,8,OFF);
        
        
      } 
      else if (input_password == password_9 )
      {
        Serial.println("The password is correct, turning ON relay 9");
        channel_mode(BOARD_2,1,ON);
        delay(1000);
        channel_mode(BOARD_2,1,OFF);
      } 
      else if (input_password == password_10 )
      {
        Serial.println("The password is correct, turning ON relay 10");
        channel_mode(BOARD_2,2,ON);
        delay(1000);
        channel_mode(BOARD_2,2,OFF);
      } 
      else if (input_password == password_11 )
      {
        Serial.println("The password is correct, turning ON relay 11");
        channel_mode(BOARD_2,3,ON);
        delay(1000);
        channel_mode(BOARD_2,3,OFF);
      } 
      else if (input_password == password_12 )
      {
        Serial.println("The password is correct, turning ON relay 12");
        channel_mode(BOARD_2,4,ON);
        delay(1000);
        channel_mode(BOARD_2,4,OFF);
      } 
      else if (input_password == password_13 )
      {
        Serial.println("The password is correct, turning ON relay 13");
        channel_mode(BOARD_2,5,ON);
        delay(1000);
        channel_mode(BOARD_2,5,OFF);
      } 
      else if (input_password == password_14 )
      {
        Serial.println("The password is correct, turning ON relay 14");
        channel_mode(BOARD_2,6,ON);
        delay(1000);
        channel_mode(BOARD_2,6,OFF);
      } 
      else if (input_password == password_15 )
      {
        Serial.println("The password is correct, turning ON relay 15");
        channel_mode(BOARD_2,7,ON);
        delay(1000);
        channel_mode(BOARD_2,7,OFF);
      }
      else if (input_password == password_16 )
      {
        Serial.println("The password is correct, turning ON relay 16");
        channel_mode(BOARD_2,8,ON);
        delay(1000);
        channel_mode(BOARD_2,8,OFF);
      } 
      else if (input_password == password_17 )
      {
        Serial.println("The password is correct, turning ON relay 17");
        channel_mode(BOARD_3,1,ON);
        delay(1000);
        channel_mode(BOARD_3,1,OFF);
      } 
      else if (input_password == password_18 )
      {
        Serial.println("The password is correct, turning ON relay 18");
        channel_mode(BOARD_3,2,ON);
        delay(1000);
        channel_mode(BOARD_3,2,OFF);
      }  
      else if (input_password == password_19 )
      {
        Serial.println("The password is correct, turning ON relay 19");
        channel_mode(BOARD_3,3,ON);
        delay(1000);
        channel_mode(BOARD_3,3,OFF);
      } 
      else if (input_password == password_20 )
      {
        Serial.println("The password is correct, turning ON relay 20");
        channel_mode(BOARD_3,4,ON);
        delay(1000);
        channel_mode(BOARD_3,4,OFF);
      } 
      else if (input_password == password_21 )
      {
        Serial.println("The password is correct, turning ON relay 21");
        channel_mode(BOARD_3,5,ON);
        delay(1000);
        channel_mode(BOARD_3,5,OFF);
      } 
      else if (input_password == password_22 )
      {
        Serial.println("The password is correct, turning ON relay 22");
        channel_mode(BOARD_3,6,ON);
        delay(1000);
        channel_mode(BOARD_3,6,OFF);
      } 
      else if (input_password == password_23 )
      {
        Serial.println("The password is correct, turning ON relay 23");
        channel_mode(BOARD_3,7,ON);
        delay(1000);
        channel_mode(BOARD_3,7,OFF);
      } 
      else if (input_password == password_24 )
      {
        Serial.println("The password is correct, turning ON relay 24");
        channel_mode(BOARD_3,8,ON);
        delay(1000);
        channel_mode(BOARD_3,8,OFF);
      } 
      
      
      
      
      else {
        Serial.println("The password is incorrect, try again");
                
      }

      input_password = ""; // reset the input password
    } else {
      input_password += key; // append new character to input password string
    }
  } 
  BlynkEdgent.run();
}
void channel_mode(unsigned char addr, unsigned char channel, unsigned char value)
{
 switch (addr) {   case BOARD_1: i2c_buffer = i2c_buffer_1; break;
                   case BOARD_2: i2c_buffer = i2c_buffer_2; break;
                   case BOARD_3: i2c_buffer = i2c_buffer_3; break;
                     }
                  

 channel = 8-channel;

 i2c_buffer &= ~(1<<(channel));
 i2c_buffer |= value<<channel;

 
 switch (addr) {   case BOARD_1: i2c_buffer_1 = i2c_buffer; break;
                   case BOARD_2: i2c_buffer_2 = i2c_buffer; break;
                   case BOARD_3: i2c_buffer_3 = i2c_buffer; break;
                     }
 

 Wire.beginTransmission(addr);             
 Wire.write(~i2c_buffer);               
 Wire.endTransmission(); 
 
}

BLYNK_CONNECTED() {
    Blynk.syncAll();
}

BLYNK_WRITE(V1)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_1,1,ON);
  }
  else{
    channel_mode(BOARD_1,1,OFF);
  }
}

BLYNK_WRITE(V2)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_1,2,ON);
  }
  else{
    channel_mode(BOARD_1,2,OFF);
  }
}
BLYNK_WRITE(V3)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_1,3,ON);
  }
  else{
    channel_mode(BOARD_1,3,OFF);
  }
}
BLYNK_WRITE(V4)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_1,4,ON);
  }
  else{
    channel_mode(BOARD_1,4,OFF);
  }
}
BLYNK_WRITE(V5)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_1,5,ON);
  }
  else{
    channel_mode(BOARD_1,5,OFF);
  }
}
BLYNK_WRITE(V6)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_1,6,ON);
  }
  else{
    channel_mode(BOARD_1,6,OFF);
  }
}
BLYNK_WRITE(V7)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_1,7,ON);
  }
  else{
    channel_mode(BOARD_1,7,OFF);
  }
}
BLYNK_WRITE(V8)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_1,8,ON);
  }
  else{
    channel_mode(BOARD_1,8,OFF);
  }
}
BLYNK_WRITE(V9)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_2,1,ON);
  }
  else{
    channel_mode(BOARD_2,1,OFF);
  }
}
BLYNK_WRITE(V10)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_2,2,ON);
  }
  else{
    channel_mode(BOARD_2,2,OFF);
  }
}
BLYNK_WRITE(V11)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_2,3,ON);
  }
  else{
    channel_mode(BOARD_2,3,OFF);
  }
}
BLYNK_WRITE(V12)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_2,4,ON);
  }
  else{
    channel_mode(BOARD_2,4,OFF);
  }
}
BLYNK_WRITE(V13)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_2,5,ON);
  }
  else{
    channel_mode(BOARD_2,5,OFF);
  }
}
BLYNK_WRITE(V14)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_2,6,ON);
  }
  else{
    channel_mode(BOARD_2,6,OFF);
  }
}
BLYNK_WRITE(V15)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_2,7,ON);
  }
  else{
    channel_mode(BOARD_2,7,OFF);
  }
}
BLYNK_WRITE(V16)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_2,8,ON);
  }
  else{
    channel_mode(BOARD_2,8,OFF);
  }
}
BLYNK_WRITE(V17)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_3,1,ON);
  }
  else{
    channel_mode(BOARD_3,1,OFF);
  }
}

BLYNK_WRITE(V18)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_3,2,ON);
  }
  else{
    channel_mode(BOARD_3,2,OFF);
  }
}
BLYNK_WRITE(V19)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_3,3,ON);
  }
  else{
    channel_mode(BOARD_3,3,OFF);
  }
}
BLYNK_WRITE(V20)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_3,4,ON);
  }
  else{
    channel_mode(BOARD_3,4,OFF);
  }
}
BLYNK_WRITE(V21)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_3,5,ON);
  }
  else{
    channel_mode(BOARD_3,5,OFF);
  }
}
BLYNK_WRITE(V22)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_3,6,ON);
  }
  else{
    channel_mode(BOARD_3,6,OFF);
  }
}
BLYNK_WRITE(V23)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_3,7,ON);
  }
  else{
    channel_mode(BOARD_3,7,OFF);
  }
}
BLYNK_WRITE(V24)
{   
  int value = param.asInt(); // Get value as integer
  if(value == 1){
    channel_mode(BOARD_3,8,ON);
  }
  else{
    channel_mode(BOARD_3,8,OFF);
  }
}
